[{"/home/e1f/Documents/Project/project-frontend/src/dashboard/dashboard.js":"1","/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/Recipientstable.js":"2","/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/RecipientModal.js":"3","/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/UserDetailsForm.js":"4","/home/e1f/Documents/Project/project-frontend/src/dashboard/merchants/index.js":"5","/home/e1f/Documents/Project/project-frontend/src/dashboard/deposit/index.js":"6","/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/fileuploadcomponent.js":"7","/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/recipientsform.js":"8","/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/TransfersinModal.js":"9","/home/e1f/Documents/Project/project-frontend/src/dashboard/home/index.js":"10","/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/commonlogic.js":"11"},{"size":7229,"mtime":1609180162016,"results":"12","hashOfConfig":"13"},{"size":2671,"mtime":1609178012072,"results":"14","hashOfConfig":"13"},{"size":1699,"mtime":1609179829757,"results":"15","hashOfConfig":"13"},{"size":6438,"mtime":1609180551442,"results":"16","hashOfConfig":"13"},{"size":104,"mtime":1608204654256,"results":"17","hashOfConfig":"13"},{"size":102,"mtime":1608204609874,"results":"18","hashOfConfig":"13"},{"size":10200,"mtime":1609162087261,"results":"19","hashOfConfig":"13"},{"size":5951,"mtime":1609173606587,"results":"20","hashOfConfig":"13"},{"size":1477,"mtime":1609172788941,"results":"21","hashOfConfig":"13"},{"size":101,"mtime":1609162301630,"results":"22","hashOfConfig":"13"},{"size":1016,"mtime":1609173612851,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"17bm3h9",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/e1f/Documents/Project/project-frontend/src/dashboard/dashboard.js",["50"],"/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/Recipientstable.js",[],["51","52"],"/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/RecipientModal.js",[],"/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/UserDetailsForm.js",["53","54"],"import React, { useContext } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport axios from \"axios\";\nimport parsePhoneNumber from \"libphonenumber-js\";\nimport { Appcontext } from \"../AppContext\";\nimport { validateidnumber, validatemobilenumber } from \"./commonlogic\";\n\nexport const USerDetailsForm = () => {\n  const { register, handleSubmit, errors, reset } = useForm();\n\n  const { setAppNotification, appnotification, userdetails } = useContext(\n    Appcontext\n  );\n\n  const {\n    firstname,\n    lastname,\n    idnumber,\n    mobilenumber,\n    balance,\n    uuid,\n  } = userdetails;\n\n  const submitform = async (data) => {\n    const internationalnumber = parsePhoneNumber(data.mobilenumber, \"KE\")\n      .number;\n    console.log([{ ...data, mobilenumber: internationalnumber }]);\n    try {\n      let response = await axios.post(\n        `${process.env.REACT_APP_SERVER}/updaterecipients`,\n        [data],\n        {\n          withCredentials: true,\n        }\n      );\n\n      if (response.status === 200) {\n        setAppNotification({\n          ...appnotification,\n          message: \"User Submitted\",\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    reset();\n  };\n\n  return (\n    <>\n      <div className=\"text-center underline\">Recipient Details</div>\n      <form\n        className=\"flex flex-wrap flex-col\"\n        onSubmit={handleSubmit(submitform)}\n      >\n        <div className=\"flex justify-center flex-wrap\">\n          <span className=\"mr-1 w-3/4\">\n            <label htmlFor=\"firstnamemodal\" className=\"\">\n              FirstName:\n            </label>\n            <br />\n            <input\n              type=\"text\"\n              placeholder=\"First Name\"\n              name=\"firstname\"\n              id=\"firstnamemodal\"\n              defaultValue={firstname}\n              className=\"outline-none pl-1 rounded-lg py-1 border-2 w-full\"\n              ref={register({ required: true })}\n            />\n            <br />\n            <span className=\"text-red-600 \">\n              {errors.firstname && <span>This is required</span>}\n            </span>\n          </span>\n          <span className=\"mr-1 w-3/4\">\n            <label htmlFor=\"lastnamemodal\" className=\"\">\n              LastName:\n            </label>\n            <br />\n            <input\n              type=\"text\"\n              placeholder=\"Last Name\"\n              name=\"lastname\"\n              id=\"lastnamemodal\"\n              defaultValue={lastname}\n              className=\"outline-none pl-1 rounded-lg py-1 border-2 w-full\"\n              ref={register({ required: true })}\n            />\n            <br />\n            <span className=\"text-red-600 \">\n              {errors.lastname && <span>This is required</span>}\n            </span>\n          </span>\n          <span className=\"mr-1 w-3/4\">\n            <label htmlFor=\"idnumbermodal\" className=\"\">\n              Id Number\n            </label>\n            <br />\n            <input\n              type=\"number\"\n              placeholder=\"Id Number\"\n              name=\"idnumber\"\n              id=\"idnumbermodal\"\n              defaultValue={idnumber}\n              className=\"outline-none pl-1 rounded-lg py-1 border-2 w-full\"\n              ref={register({\n                required: true,\n                validate: {\n                  isIdValid: async (value) => await validateidnumber(value),\n                },\n                minLength: { value: 7, message: \" Id number to short \" },\n                maxLength: { value: 8, message: \"Id number is too long\" },\n              })}\n            />\n            <br />\n            <span className=\"text-red-600 \">\n              {errors.idnumber?.type === \"required\" && (\n                <span>This is required</span>\n              )}\n              {errors.idnumber?.type === \"minLength\" && (\n                <span>{errors.idnumber?.message}</span>\n              )}\n              {errors.idnumber?.type === \"isIdValid\" && (\n                <span> Id Number has been used</span>\n              )}\n              {errors.idnumber?.type === \"maxLength\" && (\n                <span>{errors.idnumber?.message}</span>\n              )}\n            </span>\n          </span>\n          <span className=\"mr-1 w-3/4\">\n            <label htmlFor=\"mobilenumbermodal\" className=\"\">\n              Mobile Number\n            </label>\n            <br />\n            <input\n              type=\"number\"\n              placeholder=\"Mobile Number\"\n              name=\"mobilenumber\"\n              id=\"mobilenumbermodal\"\n              defaultValue={mobilenumber}\n              className=\"outline-none pl-1 rounded-lg py-1 border-2 w-full\"\n              ref={register({\n                required: { value: true, message: \"Mobile number is required\" },\n                validate: {\n                  isnumbervalid: (value) => {\n                    if (value === \"0\") {\n                      return false;\n                    }\n                    return parsePhoneNumber(value, \"KE\")?.isValid();\n                  },\n                  isnumberUsed: async (value) =>\n                    await validatemobilenumber(value),\n                },\n                minLength: {\n                  value: 10,\n                  message: \"Enter a valid mobile number\",\n                },\n              })}\n            />\n            <br />\n            <span className=\"text-red-600 \">\n              {errors.mobilenumber?.type === \"required\" && (\n                <span>This is required</span>\n              )}\n              {errors.mobilenumber?.type === \"minLength\" && (\n                <span>{errors.mobilenumber?.message}</span>\n              )}\n              {errors.mobilenumber?.type === \"isnumbervalid\" && (\n                <span>Invalid Number</span>\n              )}\n              {errors.mobilenumber?.type === \"isnumberUsed\" && (\n                <span>Number has been used</span>\n              )}\n            </span>\n          </span>\n        </div>\n        <div className=\" text-center h-12 mt-2\">\n          <button\n            type=\"submit\"\n            className=\" w-3/4 border h-full rounded-lg text-lg bg-yellow-400 hover:bg-yellow-300 focus:outline-none\"\n          >\n            Update Recipient\n          </button>\n        </div>\n      </form>\n      <div className=\"absolute bottom-5 right-5\">\n        <button className=\"bg-red-400 hover:bg-red-600 hover:text-white h-9 w-44 rounded-lg\">\n          Delete Recipient\n        </button>\n      </div>\n    </>\n  );\n};\n","/home/e1f/Documents/Project/project-frontend/src/dashboard/merchants/index.js",[],["55","56"],"/home/e1f/Documents/Project/project-frontend/src/dashboard/deposit/index.js",[],"/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/fileuploadcomponent.js",["57"],"import { useDropzone } from \"react-dropzone\";\nimport { useMemo, useCallback, useContext } from \"react\";\nimport XLSX from \"xlsx\";\nimport parsePhoneNumber from \"libphonenumber-js\";\nimport { Appcontext } from \"../AppContext\";\nimport axios from \"axios\";\n\nconst mystyles = {\n  baseStyles:\n    \"w-full border-4 border-dashed outline-none rounded-lg h-20 transition duration-500 flex justify-center items-center text-gray-500\",\n  acceptStyle: \" border-green-500 \",\n  rejectStyle: \" border-red-600 \",\n};\n\nexport const Fileuploadcomponent = () => {\n  const {\n    setAppError,\n    apperror,\n    setAppNotification,\n    appnotification,\n  } = useContext(Appcontext);\n\n  const {\n    // acceptedFiles,\n    getInputProps,\n    getRootProps,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({\n    accept:\n      \" application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    //\n    onDrop: useCallback(\n      async (acceptedFiles) => {\n        acceptedFiles.forEach((file) => {\n          const reader = new FileReader();\n          reader.onerror = () => console.log(\"error occured\");\n          reader.onabort = () => console.log(\"abort error\");\n          reader.onload = () => {\n            const data = new Uint8Array(reader.result);\n            const workbook = XLSX.read(data, { type: \"array\" });\n            console.log(workbook.SheetNames);\n\n            const firstsheetname = workbook.SheetNames[0];\n            let worksheet = workbook.Sheets[firstsheetname];\n            let sheetdata = XLSX.utils.sheet_to_json(worksheet);\n\n            try {\n              // Check if sheet is empty\n              if (Array.isArray(sheetdata) && !sheetdata.length) {\n                // if empty throw error\n                throw new Error(\"Excel file is empty\");\n              } else if (Array.isArray(sheetdata) && sheetdata.length) {\n                //if not empty check if titles are present\n                console.log(\"Here is your data\", sheetdata);\n\n                let arrayofid = [];\n                let arrayofmobilenumbers = [];\n                let mobilenumberdictionary;\n                let iddictionary;\n                // let tobeverifiedtbyserver = [];\n\n                //to be done for each record in the sheet\n                sheetdata.forEach((entry) => {\n                  const hascorrectkeys = Object.keys(entry)\n                    .map((entrytitle) => entrytitle.toLowerCase())\n                    .includes(\n                      \"firstname\" && \"lastname\" && \"idnumber\" && \"mobilenumber\"\n                    );\n\n                  if (hascorrectkeys) {\n                    // if all titles are present create object of these values and add to array of values to send\n\n                    // addnumber to array of numbers\n                    arrayofmobilenumbers = [\n                      ...arrayofmobilenumbers,\n                      entry.mobilenumber,\n                    ];\n                    arrayofid = [...arrayofid, entry.idnumber];\n                  } else {\n                    // if missing a title throw an error\n\n                    throw new Error(\n                      \"Please Check if you have a firstname,lastname,idnumber and mobilenumber columns in your excel file and all cells have data\"\n                    );\n                  }\n                });\n                // create a dictionary of ids and mobile numbers\n\n                const dictionarymobile = (accumulator, mobilenumber) => ({\n                  ...accumulator,\n                  [mobilenumber]: (accumulator[mobilenumber] || 0) + 1,\n                });\n                const dictionaryid = (accumulator, idnumber) => ({\n                  ...accumulator,\n                  [idnumber]: (accumulator[idnumber] || 0) + 1,\n                });\n                // An object with all mobilenumbers and the number of instances of each mobile number\n                mobilenumberdictionary = arrayofmobilenumbers.reduce(\n                  dictionarymobile,\n                  {}\n                );\n                iddictionary = arrayofid.reduce(dictionaryid, {});\n\n                const duplicatemobilenumbers = () => {\n                  return Object.keys(mobilenumberdictionary).filter(\n                    (value) => mobilenumberdictionary[value] > 1\n                  );\n                };\n                const duplicateids = () => {\n                  return Object.keys(iddictionary).filter(\n                    (value) => iddictionary[value] > 1\n                  );\n                };\n\n                const idduplicates = duplicateids();\n                const mobilenumberduplicates = duplicatemobilenumbers();\n\n                // checks if there are any duplicates by checking array length\n\n                if (idduplicates.length || mobilenumberduplicates.length) {\n                  let myerror = idduplicates\n                    ? `Duplicate Id: ${idduplicates} `\n                    : \"\";\n\n                  let mobileerror = mobilenumberduplicates\n                    ? ` Duplicate mobilenumbers: ${mobilenumberduplicates}`\n                    : \"\";\n\n                  throw new Error(myerror + mobileerror);\n                }\n                //check if a mobilenumber has a length of ten\n                let numberslessthanten = sheetdata.reduce(\n                  (accumulator, current) => {\n                    if (\n                      !parsePhoneNumber(\n                        current.mobilenumber.toString(),\n                        \"KE\"\n                      ).isValid()\n                    ) {\n                      return [\n                        ...accumulator,\n                        {\n                          mobilenumber: current.mobilenumber,\n                          rownum: current.__rowNum__,\n                        },\n                      ];\n                    } else {\n                      return accumulator;\n                    }\n                  },\n                  []\n                );\n\n                let idnumberslessthanten = sheetdata.reduce(\n                  (accumulator, current) => {\n                    if (\n                      current.idnumber.toString().length < 7 ||\n                      current.idnumber.toString().length > 8\n                    ) {\n                      return [\n                        ...accumulator,\n                        {\n                          idnumber: current.idnumber,\n                          rownum: current.__rowNum__,\n                        },\n                      ];\n                    } else {\n                      return accumulator;\n                    }\n                  },\n                  []\n                );\n                console.log(`id numbers less than ten:`, idnumberslessthanten);\n                if (\n                  numberslessthanten?.length ||\n                  idnumberslessthanten?.length\n                ) {\n                  let mynumberslessthanten = [\n                    ...numberslessthanten,\n                    ...idnumberslessthanten,\n                  ];\n                  console.log(mynumberslessthanten);\n\n                  let myerror = mynumberslessthanten.reduce(\n                    (accumulator, lessthanten) => {\n                      let numberslessthantenerror = Object.keys(\n                        lessthanten\n                      ).includes(\"mobilenumber\")\n                        ? \"The mobile number \" +\n                          lessthanten.mobilenumber +\n                          \" at row \" +\n                          lessthanten.rownum +\n                          \" is not a valid mobile number\\n\"\n                        : \"The id number \" +\n                          lessthanten.idnumber +\n                          \" at row \" +\n                          lessthanten.rownum +\n                          \" is not a valid id number\\n\";\n                      return [...accumulator, numberslessthantenerror];\n                    },\n                    []\n                  );\n\n                  let newmyerror = myerror.reduce(\n                    (accumulator, currentvalue) => {\n                      return accumulator.concat(currentvalue);\n                    },\n                    \"\"\n                  );\n\n                  throw new Error(newmyerror);\n                } else {\n                  submittoserver(sheetdata);\n\n                  // console.log(\"file is ok to send to server\", sheetdata);\n                }\n              } else {\n                console.log(\"error occured\");\n                throw new Error(\"Error Occurred\");\n              }\n            } catch (error) {\n              console.log(error.message);\n              setAppError({\n                ...apperror,\n                color: \"bg-red-500\",\n                textcolor: \"text-white\",\n                errormessage: error.message,\n              });\n            }\n          };\n          reader.readAsArrayBuffer(file);\n        });\n      },\n      [setAppError, apperror]\n    ),\n    maxFiles: 1,\n  });\n\n  const submittoserver = async (data) => {\n    try {\n      let result = await axios.post(\n        `${process.env.REACT_APP_SERVER}/addrecipients`,\n        data,\n        {\n          withCredentials: true,\n        }\n      );\n      if (result.status === 200) {\n        setAppNotification({\n          ...appnotification,\n          message: \"Success\",\n        });\n      }\n    } catch (error) {\n      setAppError({\n        ...apperror,\n        color: \"bg-red-500\",\n        errormessage: `${error.response.data.error}`,\n      });\n      console.log(error.response.data.error);\n    }\n  };\n\n  const style = useMemo(() => {\n    if (isDragAccept) {\n      return mystyles.baseStyles.concat(mystyles.acceptStyle);\n    } else if (isDragReject) {\n      return mystyles.baseStyles.concat(mystyles.rejectStyle);\n    } else {\n      return mystyles.baseStyles;\n    }\n  }, [isDragAccept, isDragReject]);\n\n  return (\n    <div className=\" flex flex-col \">\n      <div {...getRootProps({ className: style })}>\n        <input {...getInputProps()} />\n        <div className=\"flex flex-col text-center text-lg\">\n          <p>Drag and drop your recipients excel file or click to add</p>\n          <p>maximum of 1 excel file and 1 sheet</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/recipientsform.js",[],"/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/TransfersinModal.js",[],"/home/e1f/Documents/Project/project-frontend/src/dashboard/home/index.js",[],"/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/commonlogic.js",[],{"ruleId":"58","severity":1,"message":"59","line":85,"column":6,"nodeType":"60","endLine":85,"endColumn":8,"suggestions":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":20,"column":5,"nodeType":"68","messageId":"69","endLine":20,"endColumn":12},{"ruleId":"66","severity":1,"message":"70","line":21,"column":5,"nodeType":"68","messageId":"69","endLine":21,"endColumn":9},{"ruleId":"62","replacedBy":"71"},{"ruleId":"64","replacedBy":"72"},{"ruleId":"58","severity":1,"message":"73","line":235,"column":7,"nodeType":"60","endLine":235,"endColumn":30,"suggestions":"74"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'apperror'. Either include it or remove the dependency array. You can also do a functional update 'setAppError(a => ...)' if you only need 'apperror' in the 'setAppError' call.","ArrayExpression",["75"],"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'balance' is assigned a value but never used.","Identifier","unusedVar","'uuid' is assigned a value but never used.",["76"],["77"],"React Hook useCallback has a missing dependency: 'submittoserver'. Either include it or remove the dependency array.",["78"],{"desc":"79","fix":"80"},"no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [apperror]",{"range":"83","text":"84"},"Update the dependencies array to be: [submittoserver, setAppError, apperror]",{"range":"85","text":"86"},[2050,2052],"[apperror]",[8887,8910],"[submittoserver, setAppError, apperror]"]