[{"/home/e1f/Documents/Project/project-frontend/src/App.js":"1","/home/e1f/Documents/Project/project-frontend/src/auth/Signup.js":"2","/home/e1f/Documents/Project/project-frontend/src/index.js":"3","/home/e1f/Documents/Project/project-frontend/src/auth/Main.js":"4","/home/e1f/Documents/Project/project-frontend/src/auth/Showcontext.js":"5","/home/e1f/Documents/Project/project-frontend/src/auth/Login.js":"6","/home/e1f/Documents/Project/project-frontend/src/dashboard/dashboard.js":"7","/home/e1f/Documents/Project/project-frontend/src/auth/authservice.js":"8","/home/e1f/Documents/Project/project-frontend/src/auth/protected.route.js":"9","/home/e1f/Documents/Project/project-frontend/src/dashboard/home/index.js":"10","/home/e1f/Documents/Project/project-frontend/src/dashboard/deposit/index.js":"11","/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/index.js":"12","/home/e1f/Documents/Project/project-frontend/src/dashboard/merchants/index.js":"13","/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/recipientsform.js":"14","/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/fileuploadcomponent.js":"15"},{"size":553,"mtime":1608304608743,"results":"16","hashOfConfig":"17"},{"size":7861,"mtime":1607875309923,"results":"18","hashOfConfig":"17"},{"size":223,"mtime":1608158579077,"results":"19","hashOfConfig":"17"},{"size":2113,"mtime":1607875428000,"results":"20","hashOfConfig":"17"},{"size":88,"mtime":1607324496706,"results":"21","hashOfConfig":"17"},{"size":2540,"mtime":1608153273259,"results":"22","hashOfConfig":"17"},{"size":3745,"mtime":1608485115015,"results":"23","hashOfConfig":"17"},{"size":1593,"mtime":1608139452264,"results":"24","hashOfConfig":"17"},{"size":1005,"mtime":1608147613979,"results":"25","hashOfConfig":"17"},{"size":322,"mtime":1608219878745,"results":"26","hashOfConfig":"17"},{"size":102,"mtime":1608204609874,"results":"27","hashOfConfig":"17"},{"size":637,"mtime":1608316473743,"results":"28","hashOfConfig":"17"},{"size":104,"mtime":1608204654256,"results":"29","hashOfConfig":"17"},{"size":6538,"mtime":1608653400819,"results":"30","hashOfConfig":"17"},{"size":7625,"mtime":1608661672025,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"17bm3h9",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},"/home/e1f/Documents/Project/project-frontend/src/App.js",[],["69","70"],"/home/e1f/Documents/Project/project-frontend/src/auth/Signup.js",[],["71","72"],"/home/e1f/Documents/Project/project-frontend/src/index.js",[],["73","74"],"/home/e1f/Documents/Project/project-frontend/src/auth/Main.js",[],["75","76"],"/home/e1f/Documents/Project/project-frontend/src/auth/Showcontext.js",[],["77","78"],"/home/e1f/Documents/Project/project-frontend/src/auth/Login.js",[],"/home/e1f/Documents/Project/project-frontend/src/dashboard/dashboard.js",[],"/home/e1f/Documents/Project/project-frontend/src/auth/authservice.js",[],"/home/e1f/Documents/Project/project-frontend/src/auth/protected.route.js",[],["79","80"],"/home/e1f/Documents/Project/project-frontend/src/dashboard/home/index.js",[],"/home/e1f/Documents/Project/project-frontend/src/dashboard/deposit/index.js",[],"/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/index.js",[],"/home/e1f/Documents/Project/project-frontend/src/dashboard/merchants/index.js",[],"/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/recipientsform.js",[],"/home/e1f/Documents/Project/project-frontend/src/dashboard/recipients/fileuploadcomponent.js",["81","82"],"import { useDropzone } from \"react-dropzone\";\nimport { useMemo, useCallback } from \"react\";\nimport XLSX from \"xlsx\";\n\nconst mystyles = {\n  baseStyles:\n    \"w-full border-4 border-dashed outline-none rounded-lg h-20 transition duration-500 flex justify-center items-center text-gray-500\",\n  acceptStyle: \" border-green-500 \",\n  rejectStyle: \" border-red-600 \",\n};\n\nexport const Fileuploadcomponent = () => {\n  const {\n    acceptedFiles,\n    getInputProps,\n    getRootProps,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({\n    accept:\n      \" application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    //\n    onDrop: useCallback((acceptedFiles) => {\n      acceptedFiles.forEach((file) => {\n        const reader = new FileReader();\n        reader.onerror = () => console.log(\"error occured\");\n        reader.onabort = () => console.log(\"abort error\");\n        reader.onload = () => {\n          const data = new Uint8Array(reader.result);\n          const workbook = XLSX.read(data, { type: \"array\" });\n          console.log(workbook.SheetNames);\n\n          const firstsheetname = workbook.SheetNames[0];\n          let worksheet = workbook.Sheets[firstsheetname];\n          let sheetdata = XLSX.utils.sheet_to_json(worksheet);\n\n          try {\n            // Check if sheet is empty\n            if (Array.isArray(sheetdata) && !sheetdata.length) {\n              // if empty throw error\n              throw new Error(\"Excel file is empty\");\n            } else if (Array.isArray(sheetdata) && sheetdata.length) {\n              //if not empty check if titles are present\n              console.log(\"Here is your data\", sheetdata);\n\n              let array0fid = [];\n              let arrayofmobilenumbers = [];\n              let mobilenumberdictionary;\n              let iddictionary;\n              let tobeverifiedtbyserver = [];\n\n              //to be done for each record in the sheet\n              sheetdata.forEach((entry) => {\n                const hascorrectkeys = Object.keys(entry)\n                  .map((entrytitle) => entrytitle.toLowerCase())\n                  .includes(\n                    \"firstname\" && \"lastname\" && \"idnumber\" && \"mobilenumber\"\n                  );\n                // checks for required titles for each object\n                // let hascorrectkeys = titles.includes(\n                //   \"firstname\" && \"lastname\" && \"idnumber\" && \"mobilenumber\"\n                // );\n                if (hascorrectkeys) {\n                  // if all titles are present create object of these values and add to array of values to send\n\n                  // addnumber to array of numbers\n                  arrayofmobilenumbers = [\n                    ...arrayofmobilenumbers,\n                    entry.mobilenumber,\n                  ];\n                  array0fid = [...array0fid, entry.idnumber];\n                } else {\n                  // if missing a title throw an error\n\n                  throw new Error(\n                    \"Please Check if you have a firstname,lastname,idnumber and mobilenumber columns in your excel file\"\n                  );\n                }\n              });\n              // create a dictionary of ids and mobile numbers\n\n              const dictionarymobile = (accumulator, mobilenumber) => ({\n                ...accumulator,\n                [mobilenumber]: (accumulator[mobilenumber] || 0) + 1,\n              });\n              const dictionaryid = (accumulator, idnumber) => ({\n                ...accumulator,\n                [idnumber]: (accumulator[idnumber] || 0) + 1,\n              });\n              // An object with all mobilenumbers and the number of instances of each mobile number\n              mobilenumberdictionary = arrayofmobilenumbers.reduce(\n                dictionarymobile,\n                {}\n              );\n              iddictionary = array0fid.reduce(dictionaryid, {});\n\n              const duplicatemobilenumbers = () => {\n                return Object.keys(mobilenumberdictionary).filter(\n                  (value) => mobilenumberdictionary[value] > 1\n                );\n              };\n              const duplicateids = () => {\n                return Object.keys(iddictionary).filter(\n                  (value) => iddictionary[value] > 1\n                );\n              };\n\n              const idduplicates = duplicateids();\n              const mobilenumberduplicates = duplicatemobilenumbers();\n\n              // checks if there are any duplicates by checking array length\n\n              if (idduplicates.length || mobilenumberduplicates.length) {\n                let myerror = idduplicates\n                  ? `Duplicate Id: ${idduplicates} `\n                  : \"\";\n\n                let mobileerror = mobilenumberduplicates\n                  ? ` Duplicate mobilenumbers: ${mobilenumberduplicates}`\n                  : \"\";\n\n                throw new Error(myerror + mobileerror);\n              }\n              //check if a mobilenumber has a length of ten\n              let numberslessthanten = sheetdata.reduce(\n                (accumulator, current) => {\n                  if (current.mobilenumber.toString().length < 10) {\n                    return [\n                      ...accumulator,\n                      {\n                        mobilenumber: current.mobilenumber,\n                        rownum: current.__rowNum__,\n                      },\n                    ];\n                  }\n                },\n                []\n              );\n              // console.log(numberslessthanten.length);\n              if (numberslessthanten.length) {\n                let myerror = numberslessthanten.reduce(\n                  (accumulator, lessthanten) => {\n                    let numberslessthantenerror =\n                      \"The mobile number \" +\n                      lessthanten.mobilenumber +\n                      \" at row \" +\n                      lessthanten.rownum +\n                      \" is not a valid mobile number\\n\";\n                    return [...accumulator, numberslessthantenerror];\n                  },\n                  []\n                );\n                // console.log(myerror)\n                let newmyerror = myerror.reduce((accumulator, currentvalue) => {\n                  return accumulator.concat(currentvalue);\n                }, \"\");\n\n                throw new Error(newmyerror);\n\n                // console.log([...numberslessthanten]);\n              }\n              console.log(\"file is ok to send to server\", sheetdata);\n            } else {\n              console.log(\"error occured\");\n              throw new Error(\"Error Occurred\");\n            }\n          } catch (error) {\n            console.log(error.message);\n          }\n        };\n        reader.readAsArrayBuffer(file);\n      });\n    }, []),\n    maxFiles: 1,\n  });\n  const files = acceptedFiles.map((file) => (\n    <li key={file.path}>\n      {file.path} - {file.size} bytes\n    </li>\n  ));\n\n  const style = useMemo(() => {\n    if (isDragAccept) {\n      return mystyles.baseStyles.concat(mystyles.acceptStyle);\n    } else if (isDragReject) {\n      return mystyles.baseStyles.concat(mystyles.rejectStyle);\n    } else {\n      return mystyles.baseStyles;\n    }\n  }, [isDragAccept, isDragReject]);\n\n  return (\n    <div className=\" flex flex-col \">\n      <div {...getRootProps({ className: style })}>\n        <input {...getInputProps()} />\n        <div className=\"flex flex-col text-center text-lg\">\n          <p>Drag and drop your recipients excel file or click to add</p>\n          <p>maximum of 1 excel file and 1 sheet</p>\n        </div>\n      </div>\n      <div>{files}</div>\n      <div>Processing</div>\n    </div>\n  );\n};\n",{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"83","replacedBy":"87"},{"ruleId":"85","replacedBy":"88"},{"ruleId":"83","replacedBy":"89"},{"ruleId":"85","replacedBy":"90"},{"ruleId":"83","replacedBy":"91"},{"ruleId":"85","replacedBy":"92"},{"ruleId":"83","replacedBy":"93"},{"ruleId":"85","replacedBy":"94"},{"ruleId":"83","replacedBy":"95"},{"ruleId":"85","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":50,"column":19,"nodeType":"99","messageId":"100","endLine":50,"endColumn":40},{"ruleId":"101","severity":1,"message":"102","line":126,"column":40,"nodeType":"103","messageId":"104","endLine":126,"endColumn":42},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],["105"],["106"],["105"],["106"],["105"],["106"],["105"],["106"],["105"],["106"],"no-unused-vars","'tobeverifiedtbyserver' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.reduce() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]